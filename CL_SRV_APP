
import socketserver
import json
import threading
import time
import socket
import logging
import sys
import uuid

def get_ip():
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:
        s.connect(('10.255.255.255', 1))
        IP = s.getsockname()[0]
    except:
        IP = '127.0.0.1'
    finally:
        s.close()
    return IP

# ip клиента/сервера
hostAddress = get_ip()

# Настройка логгера для сервера
loggerS = logging.getLogger("Server_Side")
loggerS.setLevel(logging.DEBUG)
fileHandler = logging.FileHandler("server_logs.log", mode="w")
fileFormatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s - %(funcName)s")
fileHandler.setFormatter(fileFormatter)
loggerS.addHandler(fileHandler)

# Настройка логгера для клиента
loggerCl = logging.getLogger("Client_Side")
loggerCl.setLevel(logging.DEBUG)
fileHandler = logging.FileHandler("client_logs.log", mode="w")
fileFormatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s - %(funcName)s")
fileHandler.setFormatter(fileFormatter)
loggerCl.addHandler(fileHandler)

# Отчет со стороны клиента (client)
clientReport = {
  "type": "clientReport",
  "client": hostAddress,
  "report": {
  }
}

# Список экземпляров потоков серверов запущенных на портах {(8080, "UDP"): Thread Obj, ...}  (server)
portThreadDic = {}

# Словарь всех отчетов сформированных на стороне сервера {"id": report} (server)
reportsDic = {}

# словарь всех серверов, которые клиент должен проверить (достаются из json файла) (client)
serverDic = {}

# Список всех организуемых потоков (столько же, сколько проверяемых серверов) (client)
checkList = []

# Словарь проверенных серверов (адрес хоста и статус порта 3242) (client)
mainCheckDic = {"status": "OK"}

# Словарь всех отчетов, которые клиент получил от серверов по 3242 (client)
serversReports = {}

############################################################C L I E N T#################################################
# Класс - поток. Экземплярами данного класса являются
# клиентские сокеты, через которые проходит соединение с
# проверяемыми портами на сервере
class mySecondaryThread(threading.Thread):
    def __init__(self, host, port, protocol, connection_id):
        self.host = host
        self.port = port
        self.protocol = protocol
        self.conn_id = connection_id
        threading.Thread.__init__(self)
    # при запуске экземпляра данного потока выполнится следующий блок
    # который опросит проверяемые порты на сервере по соотв. протоколу
    # а также получит и выведет ответ от портов
    def run(self):
        if self.protocol == "TCP":
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as prtSock:
                try:
                    flag = "connection"
                    prtSock.settimeout(1)
                    prtSock.connect((self.host, self.port))
                    loggerCl.debug(f"Connection with {self.host} through TCP {self.port} was settled")
                    clientReport["report"][self.conn_id, self.host][self.host, self.protocol, self.port] = {"connection": "OK", "sendall": "NOT OK", "recv": "NOT OK"}
                    flag = "sendall simpleReq"
                    simpleRequest = {
                      "type": "simpleRequest",
                      "command": "check",
                      "connection id": self.conn_id,
                      "message": "PORT STATUS",
                      "client": hostAddress,
                      "protocol": self.protocol,
                      "port": self.port
                    }
                    simpleRequest = json.dumps(simpleRequest)
                    loggerCl.debug(f"simpleRequest for {self.host} TCP {self.port} was decoded in json string successfully")
                    prtSock.sendall(bytes(simpleRequest, encoding='utf-8'))
                    loggerCl.debug(f"simpleRequest for {self.host} TCP {self.port} was sent successfully")
                    clientReport["report"][self.conn_id, self.host][self.host, self.protocol, self.port]["sendall"] = "OK"
                    flag = "recv simpleResp"
                    rcv = prtSock.recv(1024)
                    loggerCl.debug(f"{flag} from {self.host} TCP {self.port} was recieved successfully")
                    clientReport["report"][self.conn_id, self.host][self.host, self.protocol, self.port]["recv"] = "OK"
                    msg = rcv.decode()
                    loggerCl.debug(f"{flag} from {self.host} TCP {self.port} was decoded successfully")
                    pyMsg = json.loads(msg)
                    loggerCl.debug(f"{flag} from {self.host} TCP {self.port} was decoded in python object successfully")
                    if pyMsg["type"] == "simpleRespond":
                        loggerCl.debug(f"simpleRespond from {self.host} TCP {self.port} was recieved successfully")
                    else:
                        loggerCl.warning(f"Unknown message from {self.host} TCP {self.port} was recieved. Expected simpleRespond")
                except (ConnectionError, socket.timeout):
                    loggerCl.error(f"Timeout Error on {flag} operation with {self.host} TCP {self.port}")
                    if flag == "connection":
                        clientReport["report"][self.conn_id, self.host][self.host, self.protocol, self.port] = {"connection": "NOT OK", "sendall": "NOT OK", "recv": "NOT OK"}
                    elif flag == "sendall simpleReq":
                        clientReport["report"][self.conn_id, self.host][self.host, self.protocol, self.port]["sendall"] = "NOT OK"
                    elif flag == "recv simpleResp":
                        clientReport["report"][self.conn_id, self.host][self.host, self.protocol, self.port]["recv"] = "NOT OK"
                except json.JSONDecodeError:
                    loggerCl.error(f"{flag} message {self.host} TCP {self.port} wasn\'t decoded in json string successfully")
                except InterruptedError:
                    loggerCl.error(f"{flag} operations with {self.host} TCP {self.port} was interrupted")
                    if flag == "sendall simpleReq":
                        clientReport["report"][self.conn_id, self.host][self.host, self.protocol, self.port]["sendall"] = "NOT OK"
                    elif flag == "recv simpleResp":
                        clientReport["report"][self.conn_id, self.host][self.host, self.protocol, self.port]["recv"] = "NOT OK"


        elif self.protocol == "UDP":
            with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as prtSock:
                try:
                    prtSock.settimeout(1)
                    flag = "sendto simpleReq"
                    simpleRequest = {
                      "type": "simpleRequest",
                      "command": "check",
                      "connection id": self.conn_id,
                      "message": "PORT STATUS",
                      "client": hostAddress,
                      "protocol": self.protocol,
                      "port": self.port
                    }
                    simpleRequest = json.dumps(simpleRequest)
                    loggerCl.debug(f"simpleRequest for {self.host} UDP {self.port} was decoded in json string successfully")
                    prtSock.sendto(bytes(simpleRequest, encoding="utf-8"), (self.host, self.port))
                    loggerCl.debug(f"simpleRequest for {self.host} UDP {self.port} was sent successfully")
                    clientReport["report"][self.conn_id, self.host][self.host, self.protocol, self.port] = {"sendto": "OK", "recv": "NOT OK"}
                    flag = "recv simpleResp"
                    rcv = prtSock.recv(1024)
                    loggerCl.debug(f"{flag.upper()} from {self.host} UDP {self.port} was recieved successfully")
                    clientReport["report"][self.conn_id, self.host][self.host, self.protocol, self.port]["recv"] = "OK"
                    msg = rcv.decode()
                    loggerCl.debug(f"Message from {self.host} UDP {self.port} was decoded successfully")
                    pyMsg = json.loads(msg)
                    loggerCl.debug(f"Message from {self.host} UDP {self.port} was decoded in python object successfully")
                    if pyMsg["type"] == "simpleRespond":
                        loggerCl.debug(f"simpleRespond from {self.host} UDP {self.port} was recieved successfully")
                    else:
                        loggerCl.warning(f"Unknown message from {self.host} UDP {self.port} was recieved. Expected simpleRespond")
                except socket.timeout:
                    loggerCl.error(f"Timeout Error on {flag} operation with {self.host} UDP {self.port}")
                except UnicodeDecodeError:
                    loggerCl.error(f"{flag} message {self.host} UDP {self.port} wasn\'t decoded successfully")
                except json.JSONDecodeError:
                    loggerCl.error(f"{flag} message {self.host} UDP {self.port} wasn\'t decoded in json/python successfully")
                except InterruptedError:
                    loggerCl.error(f"{flag} operations with {self.host} UDP {self.port} was interrupted")
                    if flag == "sendto simpleReq":
                        clientReport["report"][self.conn_id, self.host][self.host, self.protocol, self.port] = {"sendto": "NOT OK", "recv": "NOT OK"}
                    if flag == "recv simpleResp":
                        clientReport["report"][self.conn_id, self.host][self.host, self.protocol, self.port]["recv"] = "NOT OK"
                except:
                    loggerCl.exception("Unknown Error")

# Класс - поток. Экземплярами данного класса являются
# клиентские сокеты, через которые проходит соединение с сервером
# каждый сокет (порт) в отдельном потоке
class myThread(threading.Thread):
    # передаем ip хоста (клиентской машины)
    # порт на котором хотим организовать сокет
    # и словарь портов, которые сервер должен будет поднять на своей стороне
    def __init__(self, host, port, portCheck):
        self.host = host
        self.port = port
        self.portCheck = portCheck
        threading.Thread.__init__(self)

    # Данная ф-ция описывает, что будет происходить при запуске потока (start())
    def run(self):
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)            # создаем сокет
        try:
            conn_id = str(uuid.uuid4())
            flag = "main connection"
            sock.settimeout(1)                                              # сокращаем время на установление соединения с сервером
            sock.connect((self.host, self.port))                            # Устанавливаем соединение с сервером на порту 3242
            loggerCl.debug(f"Connection with {self.host} TCP {self.port} was settled successfully")
            clientReport["report"][conn_id, self.host] = {}
            flag = "sendall mainRequest"
            # запрос на проверку порта 3242 (string)
            mainRequest = {
              "type": "mainRequest",
              "command": "mainCheck",
              "connection id": conn_id,
              "message": f"PORT {self.port} STATUS",
              "client": hostAddress
            }
            mainRequest = json.dumps(mainRequest)
            sock.sendall(bytes(mainRequest, encoding='utf-8'))
            sendallTime = time.time()
            loggerCl.debug(f"mainRequest to {self.host} TCP {self.port} was sent successfully")
            flag = "recv mainResp"
            rcv = sock.recv(1024)
            recvTime = time.time()
            loggerCl.debug(f"Message from {self.host} TCP {self.port} was recieved successfully")
            msg = rcv.decode()
            loggerCl.debug(f"Message from {self.host} TCP {self.port} was decoded successfully")
            pyMsg = json.loads(msg)
            loggerCl.debug(f"Message from {self.host} TCP {self.port} was decoded in python object successfully")
            if pyMsg["type"] == "mainRespond":
                mainCheckDic[self.host] = "UP"                       # По получении ответа Добавляем в контрольный список инфу, что на этом хосте порт 3242 работает четко
                loggerCl.debug(f"mainRespond from {self.host} TCP {self.port} was recieved successfully")
                clientReport["report"][conn_id, self.host]["server respond time"] = recvTime - sendallTime
            else:
                mainCheckDic[self.host] = "UP-"
                loggerCl.warning(f"Unknown message from {self.host} TCP {self.port} was recieved successfully. Expected mainRespond.")
                clientReport["report"][conn_id, self.host]["server respond time"] = recvTime - sendallTime

            # проверяем список, всех ли мы опросили и все ли порты доступны
            # если нет, то говорим, что на каком-то порту проблемы и завершаем процесс
            while True:
                if len(mainCheckDic) == len(serverDic)+1:
                    if mainCheckDic["status"] == "NOT OK":
                        loggerCl.error(f"Not all servers are working on TCP {self.port}")
                        print(mainCheckDic)
                        return
                    else:
                        loggerCl.info(f"All servers are UP on TCP {self.port}")
                        print(mainCheckDic)
                        break

            flag = "sendall portList"
            # список портов передаваемых от клиента для запуска на стороне сервера
            portList = {
              "type": "portList",
              "command": "check",
              "connection id": conn_id,
              "ports": self.portCheck,
              "client": hostAddress
            }
            portList = json.dumps(portList)
            loggerCl.debug(f"portList message to {self.host} TCP {self.port} was decoded into json format successfully")
            sock.sendall(bytes(portList, encoding="utf-8"))
            loggerCl.debug(f"{flag} operations with {self.host} TCP {self.port} was successfull")
            flag = "recv portList"
            rcv = sock.recv(1024)
            loggerCl.debug(f"{flag} operations with {self.host} TCP {self.port} was successfull")
            msg = rcv.decode()
            loggerCl.debug(f"{flag} from {self.host} TCP {self.port} was decoded successfully")
            pyMsg = json.loads(msg)
            loggerCl.debug(f"{flag} from {self.host} TCP {self.port} was decoded in json formta successfully")
            if pyMsg["type"] == "portListRespond":
                loggerCl.debug(f"portListRespond from {self.host} TCP {self.port} was recieved successfully")
            else:
                loggerCl.warning(f"damaged portListRespond from {self.host} TCP {self.port} was recieved successfully")
            flag = "recv activePortListResp"
            rcv = sock.recv(1024)
            loggerCl.debug(f"{flag} operations with {self.host} TCP {self.port} was successfull")
            msg = rcv.decode()
            loggerCl.debug(f"{flag} from {self.host} TCP {self.port} was decoded successfully")
            pyMsg = json.loads(msg)
            loggerCl.debug(f"{flag} from {self.host} TCP {self.port} was decoded in json formta successfully")
            if pyMsg["type"] == "activePortListRespond":
                loggerCl.debug(f"activePortListRespond from {self.host} TCP {self.port} was recieved successfully")
                if pyMsg["message"] == "NOT OK":
                    loggerCl.error(f"not all ports on {self.host} are up")
                    return
            else:
                loggerCl.warning(f"damaged activePortListRespond from {self.host} TCP {self.port} was recieved successfully")


            # получив подтверждение, начинаем опрашивать поочередно наши порты
            # с помощью with открываем соединение, ЗАПРОС - ОТВЕТ, закрываем соединение
            for protocol, ports in self.portCheck.items():
                for port in ports:
                    portThread = mySecondaryThread(self.host, port, protocol, conn_id)
                    portThread.start()

            time.sleep(1)
            flag = "sendall reportRequest"
            # Запрос отчета о выполнении полного цикла проверок на сервер
            reportRequest = {
              "type": "reportRequest",
              "command": "check",
              "connection id": conn_id,
              "message": "NEED REPORT",
              "client": hostAddress
            }
            reportRequest = json.dumps(reportRequest)
            sock.sendall(bytes(reportRequest, encoding="utf-8"))
            loggerCl.debug(f"reportRequest to {self.host} TCP {self.port} was sent successfully")
            rcv = sock.recv(1024)
            loggerCl.debug(f"Message from {self.host} TCP {self.port} was recieved successfully")
            msg = rcv.decode()
            loggerCl.debug(f"Message from {self.host} TCP {self.port} was decoded successfully")
            pyMsg = json.loads(msg)
            loggerCl.debug(f"Message from {self.host} TCP {self.port} was decoded in python obj successfully")
            if pyMsg["type"] == "reportRespond":
                print(pyMsg)
                loggerCl.debug(f"reportRespond from {self.host} TCP {self.port} was decoded in python obj successfully")
                serversReports[conn_id, self.host] = pyMsg
            else:
                loggerCl.warning(f"Unknown message from {self.host} TCP {self.port} was recieved successfully. Expected reportRespond")

        except (ConnectionError, socket.timeout):
            if flag == "main connection":
                loggerCl.error(f"Connection with {self.host} TCP {self.port} wasn\'t settled")
            else:
                loggerCl.error(f"Connection problems {self.host} TCP {self.port} while {flag.upper()} operation")
            mainCheckDic["status"] = "NOT OK"
            mainCheckDic[self.host] = "DOWN"
            if len(serverDic) == 1:
                print(mainCheckDic)
            return
        except json.JSONDecodeError:
            loggerCl.warning(f"{flag} message {self.host} TCP {self.port} wasn\'t decoded in json string successfully")
            return
        except UnicodeDecodeError:
            loggerCl.warning(f"{flag} message {self.host} TCP {self.port} wasn\'t decoded successfully")
            return
        except InterruptedError:
            loggerCl.warning(f"{flag} operations with {self.host} TCP {self.port} was interrupted")
            mainCheckDic["status"] = "NOT OK"
            mainCheckDic[self.host] = "DOWN"
            return


############################################################S E R V E R#################################################

# Создаем свои классы серверов с поддержкой многопоточной обработки каждого request
class myTCPServer(socketserver.ThreadingMixIn, socketserver.TCPServer):
    pass

class myUDPServer(socketserver.ThreadingMixIn, socketserver.UDPServer):
    pass

# Handler для обработки соедниений на порту 3242
class MyTCPRequestHandler(socketserver.StreamRequestHandler):
    def handle(self):
        # Чтобы не разрывать соединение мы будем проверять получаемые сообщение в цикле,
        # выйдем из цикла и разорвем соединение по окончанию работы с клиентом
        loggerS.debug(f"TCP connection on 3242 with {self.client_address[0]} was established")
        while True:
            try:
                flag = "recv"
                rcv = self.request.recv(1024)
                loggerS.debug(f"{flag.upper()} from {self.client_address[0]} was successfull")
                if not rcv:
                    loggerS.debug(f"TCP connection on port 3242 with {self.client_address[0]} was completed")
                    break
                msg = rcv.decode()
                loggerS.debug(f"message from {self.client_address[0]} was decoded successfuly")
                pyMsg = json.loads(msg)

                if pyMsg["type"] == "mainRequest":
                    loggerS.debug(f"mainRequest message was recieved from {self.client_address[0]}")
                    conn_id = pyMsg["connection id"]
                    flag = "sendall mainResp"
                    mainRespond = {
                      "type": "mainRespond",
                      "command": "mainCheck",
                      "connection id": conn_id,
                      "message": "3242 IS UP",
                      "server": hostAddress
                    }
                    mainRespond = json.dumps(mainRespond)
                    self.request.sendall(bytes(mainRespond, encoding='utf-8'))
                    loggerS.debug(f"mainRespond was sent to {self.client_address[0]}")
                    continue

                elif pyMsg["type"] == "reportRequest":
                    loggerS.debug(f"reportRequest message was recieved from {self.client_address[0]}")
                    flag = "sendall repResp"
                    reportRespond = json.dumps(reportsDic[pyMsg["connection id"]])
                    self.request.sendall(bytes(reportRespond, encoding='utf-8'))
                    loggerS.debug(f"reportRespond was sent to {self.client_address[0]}")
                    continue

                elif pyMsg["type"] == "portList":
                    loggerS.debug(f"portList message was recieved from {self.client_address[0]} successfully")
                    flag = "sendall portListResp"
                    # Ответ о получении списка проверяемых портов
                    portListRespond = {
                      "type": "portListRespond",
                      "command": "mainCheck",
                      "connection id": conn_id,
                      "message": "OK",
                      "server": hostAddress
                    }
                    portListRespond = json.dumps(portListRespond)
                    self.request.sendall(bytes(portListRespond, encoding='utf-8'))
                    loggerS.debug(f"portListRespond was sent to {self.client_address[0]} successfully")
                    reportsDic[conn_id] = {
                      "type": "reportRespond",
                      "command": "mainCheck",
                      "connection id": conn_id,
                      "message": "REPORT",
                      "server": hostAddress,
                      "report": {
                          "protocol": {
                              "TCP": {},
                              "UDP": {}
                          }
                      }
                    }
                else:
                    loggerS.warning(f"Unknown message was recieved from {self.client_address[0]}. Connection was stopped.")
                    break

                flag = "sendall activePortList"
                activePortListRespond = {
                  "type": "activePortListRespond",
                  "command": "mainCheck",
                  "connection id": conn_id,
                  "message": "OK",
                  "server": hostAddress
                }
                # Проходим по словарю портов, которые необходимо поднять для проверки
                for protocol, ports in pyMsg["ports"].items():
                    for port in ports:
                        # создаем и запускаем сервер на каждом из портов в отедьном потоке, если такого сервера еще нет
                        if (port, protocol) in portThreadDic.keys():
                            loggerS.debug(f"{protocol} server on {port} is already launched")
                            reportsDic[conn_id]["report"]["protocol"][protocol][port] = {"sockServ creation": "OK", "serve_forever": "OK", "recv": "NOT OK", "send": "NOT OK"}
                        else:
                            portThread = launchedPort(hostAddress, port, protocol, conn_id)
                            portThread.start()
                            if portThread.isAlive():
                                portThreadDic[port, protocol] = portThread
                            else:
                                activePortListRespond["message"] = "NOT OK"

                if activePortListRespond["message"] == "NOT OK":
                    loggerS.error("Didn\'t manage to activate servers on all ports")
                    del reportsDic[conn_id]
                    break

                activePortListRespond = json.dumps(activePortListRespond)
                self.request.sendall(bytes(activePortListRespond, encoding='utf-8'))
                loggerS.debug(f"activePortListRespond to {self.client_address[0]} TCP 3242 was successfull")

            except (socket.timeout, ConnectionError):
                if flag == "recv":
                    loggerS.error(f"TCP on port 3242 connection with {self.client_address[0]} was broken while recieving a message")
                else:
                    loggerS.error(f"{flag} operation {self.client_address[0]} was interrupted")
                break
            except UnicodeDecodeError:
                loggerS.error(f"{flag} from {self.client_address[0]} wasn't decoded")
                break
            except json.decoder.JSONDecodeError:
                loggerS.error(f"{flag} from {self.client_address[0]} wasn't decoded from json string")
                break
            except InterruptedError:
                loggerS.error(f"{flag} operation {self.client_address[0]} was interrupted")
                break


# Класс - поток проверяемого порта. Экземплярами данного класаа являются
# сервера TCP UDP поднятые на провереяемых портах
class launchedPort(threading.Thread):
    # передаем ip адресс нашего сервера (на котором заупстим сервер)
    # порт (для которого запустим сервер)
    # протокол транспортного уровня, по которому будет работать сервер (TCP или UDP)
    def __init__(self, host, port, protocol, connection_id):
        self.host = hostAddress
        self.port = port
        self.protocol = protocol
        self.conn_id = connection_id
        threading.Thread.__init__(self)
        self.setDaemon(True)
        try:
            if self.protocol == "TCP":
                self.server = myTCPServer((self.host, self.port), mySecondaryTCPRequestHandler)
                loggerS.debug(f"{self.host} TCP {self.port} SocketServer was created")
                reportsDic[self.conn_id]["report"]["protocol"][self.protocol][self.port] = {"sockServ creation": "OK", "serve_forever": "NOT OK", "recv": "NOT OK", "send": "NOT OK"}
            elif self.protocol == "UDP":
                self.server = myUDPServer((self.host, self.port), mySecondaryUDPRequestHandler)
                loggerS.debug(f"{self.host} UDP {self.port} SocketServer was created")
                reportsDic[self.conn_id]["report"]["protocol"][self.protocol][self.port] = {"sockServ creation": "OK", "serve_forever": "NOT OK", "recv": "NOT OK", "send": "NOT OK"}
        except:
            loggerS.error(f"couldn\'t create SocketServer on {self.protocol} {self.port}")
            reportsDic[self.conn_id]["report"]["protocol"][self.protocol][self.port] = {"sockServ creation": "NOT OK", "serve_forever": "NOT OK", "recv": "NOT OK", "send": "NOT OK"}

    # Данная ф-ция описывает действия потока при его запуске (start())
    def run(self):
        try:
            reportsDic[self.conn_id]["report"]["protocol"][self.protocol][self.port]["serve_forever"] = "OK"
            self.server.serve_forever()
        except:
            reportsDic[self.conn_id]["report"]["protocol"][self.protocol][self.port]["serve_forever"] = "NOT OK"
            loggerS.error(f"couldn\'t launche serve_forever SocketServer on {self.protocol} {self.port}")

    def stop_server(self):
        self.server.shutdown()
        self.server.server_close()
        loggerS.debug(f"{self.protocol} server on {self.port} port was closed")


class mySecondaryTCPRequestHandler(socketserver.StreamRequestHandler):
    # def __init__(self, *args, **kwargs):
    #     super().__init__(*args, **kwargs)
    #     print('Args:', dir(args))
    def handle(self):
        try:
            flag = "recv"
            rcv = self.request.recv(1024)
            loggerS.debug(f"{flag.upper()} operation {self.client_address[0]} TCP {self.request.getsockname()[1]} was successful")
            msg = rcv.decode()
            loggerS.debug(f"message from {self.client_address[0]} TCP {self.request.getsockname()[1]} was decoded successfully")
            pyMsg = json.loads(msg)
            loggerS.debug(f"message from {self.client_address[0]} TCP {self.request.getsockname()[1]} was decoded in python object format successfully")
            if pyMsg["type"] == "simpleRequest":
                loggerS.debug(f"simpleRequest from {self.client_address[0]} TCP {self.request.getsockname()[1]} was recieved successfully")
                reportsDic[pyMsg["connection id"]]["report"]["protocol"]["TCP"][self.request.getsockname()[1]]["recv"] = "OK"
            else:
                loggerS.warning(f"Unknwon message from {self.client_address[0]} TCP {self.request.getsockname()[1]} was recieved successfully. Expected simpleRequest")

            flag = "sendall"
            # Ответ от проверяемого порта
            simpleRespond = {
              "type": "simpleRespond",
              "command": "mainCheck",
              "connection id": pyMsg["connection id"],
              "message": "OK",
              "server": hostAddress,
              "protocol": "TCP",
              "port": self.request.getsockname()[1]
            }
            simpleRespond = json.dumps(simpleRespond)
            loggerS.debug(f"simpleRespond {self.client_address[0]} TCP {self.request.getsockname()[1]} was decoded in json string successfully")
            self.request.sendall(bytes(simpleRespond, encoding='utf-8'))
            reportsDic[pyMsg["connection id"]]["report"]["protocol"]["TCP"][self.request.getsockname()[1]]["send"] = "OK"
            loggerS.debug(f"simpleRespond was sent to {self.client_address[0]} from TCP {self.request.getsockname()[1]}")
        except UnicodeDecodeError:
            loggerS.error(f"while {flag} operation {self.client_address[0]} TCP {self.request.getsockname()[1]} message wasn\'t decoded")
        except json.decoder.JSONDecodeError:
            loggerS.error(f"while {flag} operation {self.client_address[0]} TCP {self.request.getsockname()[1]} message wasn\'t decoded in other format")
        except (ConnectionError, InterruptedError):
            loggerS.error(f"while {flag} operation {self.client_address[0]} TCP {self.request.getsockname()[1]} connection was lost")


class mySecondaryUDPRequestHandler(socketserver.DatagramRequestHandler):
    def handle(self):
        try:
            flag = "recv"
            rcv = self.request[0]
            loggerS.debug(f"message from {self.client_address[0]} UDP {self.socket.getsockname()[1]} was recieved successfully")
            msg = rcv.decode()
            loggerS.debug(f"message from {self.client_address[0]} UDP {self.socket.getsockname()[1]} was decoded successfully")
            socket = self.request[1]
            pyMsg = json.loads(msg)
            loggerS.debug(f"message from {self.client_address[0]} UDP {self.socket.getsockname()[1]} was decoded in python object successfully")
            if pyMsg["type"] == "simpleRequest":
                loggerS.debug(f"simpleRequest from {self.client_address[0]} UDP {self.socket.getsockname()[1]} was recieved successfully")
                reportsDic[pyMsg["connection id"]]["report"]["protocol"]["UDP"][self.socket.getsockname()[1]]["recv"] = "OK"
            else:
                loggerS.warning(f"Unknwon message from {self.client_address[0]} UDP {self.socket.getsockname()[1]} was recieved successfully. Expected simpleRequest")

            flag = "sendto"
            simpleRespond = {
              "type": "simpleRespond",
              "command": "mainCheck",
              "connection id": pyMsg["connection id"],
              "message": "OK",
              "server": hostAddress,
              "protocol": "UDP",
              "port": self.socket.getsockname()[1]
            }
            simpleRespond = json.dumps(simpleRespond)
            loggerS.debug(f"simpleRespond {self.client_address[0]} UDP {self.socket.getsockname()[1]} was decoded in json string successfully")
            socket.sendto(bytes(simpleRespond, encoding='utf-8'), self.client_address)
            loggerS.debug(f"simpleRespond was sent to {self.client_address[0]} from UDP {self.socket.getsockname()[1]}")
            reportsDic[pyMsg["connection id"]]["report"]["protocol"]["UDP"][self.socket.getsockname()[1]]["send"] = "OK"
        except UnicodeDecodeError:
            loggerS.error(f"while {flag.upper()} operation {self.client_address[0]} UDP {self.socket.getsockname()[1]} message wasn\'t decoded")
        except json.decoder.JSONDecodeError:
            loggerS.error(f"while {flag.upper()} operation {self.client_address[0]} UDP {self.socket.getsockname()[1]} message wasn\'t decoded in other format")
        except (ConnectionError, InterruptedError):
            loggerS.error(f"while {flag.upper()} operation {self.client_address[0]} UDP {self.socket.getsockname()[1]} connection was lost")

class main_thread(threading.Thread):

    def __init__(self, addr, port):
        self.addr = addr
        self.port = port
        threading.Thread.__init__(self)
        try:
            self.server = myTCPServer((self.addr, port), MyTCPRequestHandler)
            loggerS.debug(f"{self.addr} 'TCP' {self.port} SocketServer was created")
        except:
            loggerS.warning(f"{self.addr} 'TCP' {self.port} SocketServer wasn\'t created")

    def run(self):
        try:
            self.server.serve_forever()
        except:
            loggerS.error(f"SocketServer on port {self.port} serve_forever error ")

    def stop_server(self):
        try:
            self.server.shutdown()
            self.server.server_close()
            loggerS.debug(f"SocketServer on {self.port} port was closed")
        except:
            loggerS.warning(f"SocketServer on {self.port} port couldn\'t be closed correctly")


# Блок отвечаюищй за запуск программы в выбранном режиме (client/server)
if __name__ == "__main__":
    if sys.argv[1] == 'client':
        serverListFileName = sys.argv[2]
        try:
            with open(serverListFileName, 'r') as f_r:
                serverDic = json.load(f_r)
                # Создаем потоки, в вкоторых будет происходить проверка порта 3242
                # и дальнейшая проверка других портов, если все сервера доступны на 3242
                for srv in serverDic:
                    thread = myThread(srv["host"], 3242, srv["ports"])
                    checkList.append(thread)
                    thread.start()

                # Проверка завершения всех вызванных потоков
                for srv in checkList:
                    print(srv.getName())
                    print(srv.isAlive())
                    if srv.isAlive():
                        srv.join()
                        print('STOPPED')
                    else:
                        print("ALREADY STOPPED")

        except:
            print("File with servers formed incorrectly. Check the syntaxis or choose another file.")

        print(serversReports)
        print("FIN")
        print(clientReport)

    elif sys.argv[1] == "server":
        mainThread = main_thread(hostAddress, 3242)
        mainThread.start()

        while True:
            try:
                if not mainThread.isAlive():
                    print("Server can\'t be launched.\nCheck TCP 3242 port.")
                    break
                else:
                    print(threading.activeCount(), "ACTIVE THREADS")
                    print(portThreadDic)
                    time.sleep(60)
                    #print(serverDic)
            except KeyboardInterrupt:
                mainThread.stop_server()
                print("Server was stopped")
                break

            # for i in serverDic.values():
            #     i.shutdown()
            #     i.server_close()                # вызывается для очистки сервера (сокета, если конкретнее) (self.socket.close())
            #     print("DOOOWN B**CH")
            # serverDic = {}
            # print("I\'M CLEAN AND READY FOR WORK")
    else:
        print("Incorrect arguments were given")
